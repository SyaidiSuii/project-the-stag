<?php

namespace App\Models;

use Illuminate\Database\Eloquent\Factories\HasFactory;
use Illuminate\Database\Eloquent\Model;
use Illuminate\Database\Eloquent\SoftDeletes;

class PurchaseOrder extends Model
{
    use HasFactory, SoftDeletes;

    protected $fillable = [
        'po_number',
        'supplier_id',
        'status',
        'order_date',
        'expected_delivery_date',
        'actual_delivery_date',
        'total_amount',
        'notes',
        'created_by',
        'approved_by',
        'approved_at',
        'is_auto_generated',
    ];

    protected $casts = [
        'order_date' => 'date',
        'expected_delivery_date' => 'date',
        'actual_delivery_date' => 'date',
        'approved_at' => 'datetime',
        'total_amount' => 'decimal:2',
        'is_auto_generated' => 'boolean',
    ];

    /**
     * Get the supplier for this PO
     */
    public function supplier()
    {
        return $this->belongsTo(Supplier::class);
    }

    /**
     * Get all items in this PO
     */
    public function items()
    {
        return $this->hasMany(PurchaseOrderItem::class);
    }

    /**
     * Get the user who created this PO
     */
    public function creator()
    {
        return $this->belongsTo(User::class, 'created_by');
    }

    /**
     * Get the user who approved this PO
     */
    public function approver()
    {
        return $this->belongsTo(User::class, 'approved_by');
    }

    /**
     * Generate unique PO number: PO-20251014-001
     */
    public static function generatePoNumber()
    {
        $date = now()->format('Ymd');
        $prefix = "PO-{$date}-";

        // Get last PO for today
        $lastPo = static::where('po_number', 'like', $prefix . '%')
            ->orderBy('po_number', 'desc')
            ->first();

        if ($lastPo) {
            $lastNumber = (int)substr($lastPo->po_number, -3);
            $newNumber = str_pad($lastNumber + 1, 3, '0', STR_PAD_LEFT);
        } else {
            $newNumber = '001';
        }

        return $prefix . $newNumber;
    }

    /**
     * Calculate and update total amount from items
     */
    public function calculateTotal()
    {
        $this->total_amount = $this->items()->sum('total_price');
        $this->save();
        return $this;
    }

    /**
     * Approve the purchase order
     */
    public function approve($userId)
    {
        $this->status = 'approved';
        $this->approved_by = $userId;
        $this->approved_at = now();
        $this->save();
        return $this;
    }

    /**
     * Mark as received and update stock
     */
    public function markAsReceived()
    {
        $this->status = 'received';
        $this->actual_delivery_date = now();
        $this->save();

        // Update stock for each item
        foreach ($this->items as $item) {
            $item->stockItem->addStock(
                $item->quantity_received ?: $item->quantity_ordered,
                'PurchaseOrder',
                $this->id,
                "PO: {$this->po_number}"
            );
        }

        return $this;
    }

    /**
     * Scope: Filter by status
     */
    public function scopeStatus($query, $status)
    {
        return $query->where('status', $status);
    }

    /**
     * Scope: Auto-generated POs only
     */
    public function scopeAutoGenerated($query)
    {
        return $query->where('is_auto_generated', true);
    }

    /**
     * Scope: Manual POs only
     */
    public function scopeManual($query)
    {
        return $query->where('is_auto_generated', false);
    }
}
