<?php

namespace App\Services;

use App\Models\StockItem;
use App\Models\PurchaseOrder;
use App\Models\PurchaseOrderItem;
use Illuminate\Support\Facades\Log;
use Illuminate\Support\Facades\DB;

class StockReplenishmentService
{
    /**
     * Check all stock items and identify low stock items
     *
     * @return \Illuminate\Database\Eloquent\Collection
     */
    public function checkStockLevels()
    {
        return StockItem::active()
            ->lowStock()
            ->with('supplier')
            ->get();
    }

    /**
     * Get critical stock items (below minimum threshold)
     *
     * @return \Illuminate\Database\Eloquent\Collection
     */
    public function getCriticalStockItems()
    {
        return StockItem::active()
            ->criticalStock()
            ->with('supplier')
            ->get();
    }

    /**
     * Generate purchase orders for low stock items automatically
     *
     * @param bool $autoApprove Whether to automatically approve generated POs
     * @return array
     */
    public function generateAutoPurchaseOrders($autoApprove = false)
    {
        $lowStockItems = $this->checkStockLevels();

        if ($lowStockItems->isEmpty()) {
            Log::info('Stock Replenishment: No low stock items found');
            return [
                'success' => true,
                'message' => 'No low stock items require purchase orders',
                'purchase_orders' => [],
            ];
        }

        // Group items by supplier
        $itemsBySupplier = $lowStockItems->groupBy('supplier_id');

        $generatedPOs = [];

        DB::beginTransaction();
        try {
            foreach ($itemsBySupplier as $supplierId => $items) {
                if (!$supplierId) {
                    Log::warning('Stock Replenishment: Items without supplier found', [
                        'items' => $items->pluck('id', 'name')
                    ]);
                    continue;
                }

                $po = $this->createPurchaseOrderForSupplier($supplierId, $items, $autoApprove);
                $generatedPOs[] = $po;
            }

            DB::commit();

            Log::info('Stock Replenishment: Auto-generated purchase orders', [
                'count' => count($generatedPOs),
                'po_numbers' => collect($generatedPOs)->pluck('po_number'),
            ]);

            return [
                'success' => true,
                'message' => count($generatedPOs) . ' purchase order(s) generated successfully',
                'purchase_orders' => $generatedPOs,
            ];
        } catch (\Exception $e) {
            DB::rollBack();

            Log::error('Stock Replenishment: Failed to generate purchase orders', [
                'error' => $e->getMessage(),
                'trace' => $e->getTraceAsString(),
            ]);

            return [
                'success' => false,
                'message' => 'Failed to generate purchase orders: ' . $e->getMessage(),
                'purchase_orders' => [],
            ];
        }
    }

    /**
     * Create a purchase order for a specific supplier with given stock items
     *
     * @param int $supplierId
     * @param \Illuminate\Support\Collection $stockItems
     * @param bool $autoApprove
     * @return PurchaseOrder
     */
    protected function createPurchaseOrderForSupplier($supplierId, $stockItems, $autoApprove = false)
    {
        // Create PO
        $po = PurchaseOrder::create([
            'po_number' => PurchaseOrder::generatePoNumber(),
            'supplier_id' => $supplierId,
            'status' => $autoApprove ? 'approved' : 'pending',
            'order_date' => now(),
            'expected_delivery_date' => now()->addDays(7), // Default 7 days
            'is_auto_generated' => true,
            'notes' => 'Auto-generated by Stock Replenishment System',
            'created_by' => 1, // System user ID, you can make this configurable
        ]);

        if ($autoApprove) {
            $po->approved_by = 1; // System user
            $po->approved_at = now();
            $po->save();
        }

        $totalAmount = 0;

        // Create PO items
        foreach ($stockItems as $item) {
            $poItem = PurchaseOrderItem::create([
                'purchase_order_id' => $po->id,
                'stock_item_id' => $item->id,
                'quantity_ordered' => $item->reorder_quantity,
                'unit_price' => $item->unit_price,
                'total_price' => $item->reorder_quantity * $item->unit_price,
                'notes' => "Current stock: {$item->current_quantity} {$item->unit_of_measure}, Reorder point: {$item->reorder_point}",
            ]);

            $totalAmount += $poItem->total_price;
        }

        // Update PO total
        $po->total_amount = $totalAmount;
        $po->save();

        return $po;
    }

    /**
     * Calculate optimal reorder quantity based on usage pattern
     * (This can be enhanced with AI/ML predictions later)
     *
     * @param StockItem $stockItem
     * @param int $daysToAnalyze
     * @return float
     */
    public function calculateOptimalReorderQuantity(StockItem $stockItem, $daysToAnalyze = 30)
    {
        // Get usage transactions from last N days
        $usageTransactions = $stockItem->transactions()
            ->where('transaction_type', 'usage')
            ->where('created_at', '>=', now()->subDays($daysToAnalyze))
            ->get();

        if ($usageTransactions->isEmpty()) {
            // No usage data, return configured reorder quantity
            return $stockItem->reorder_quantity;
        }

        // Calculate average daily usage
        $totalUsage = abs($usageTransactions->sum('quantity'));
        $averageDailyUsage = $totalUsage / $daysToAnalyze;

        // Safety stock: cover 7 days of usage minimum
        $safetyStockDays = 7;
        $optimalQuantity = $averageDailyUsage * $safetyStockDays;

        // Round up to nearest reasonable unit (e.g., round up to nearest 5)
        $optimalQuantity = ceil($optimalQuantity / 5) * 5;

        // Ensure it's at least the minimum reorder quantity
        return max($optimalQuantity, $stockItem->reorder_quantity);
    }

    /**
     * Get stock replenishment dashboard summary
     *
     * @return array
     */
    public function getDashboardSummary()
    {
        $totalItems = StockItem::active()->count();
        $lowStockItems = StockItem::active()->lowStock()->count();
        $criticalStockItems = StockItem::active()->criticalStock()->count();
        $goodStockItems = $totalItems - $lowStockItems;

        $pendingPOs = PurchaseOrder::where('status', 'pending');
        $pendingPOsCount = $pendingPOs->count();
        $pendingOrdersTotal = $pendingPOs->sum('total_amount');
        $approvedPOs = PurchaseOrder::where('status', 'approved')->count();

        $totalStockValue = StockItem::active()->get()->sum(function ($item) {
            return $item->current_quantity * $item->unit_price;
        });

        return [
            'total_stock_items' => $totalItems,
            'good_stock_items' => $goodStockItems,
            'low_stock_items' => $lowStockItems,
            'critical_stock_items' => $criticalStockItems,
            'pending_purchase_orders' => $pendingPOsCount,
            'pending_orders_total' => $pendingOrdersTotal,
            'approved_purchase_orders' => $approvedPOs,
            'total_stock_value' => number_format($totalStockValue, 2),
        ];
    }

    /**
     * Send low stock alert notifications
     * (Can be extended to send emails/SMS)
     *
     * @return array
     */
    public function sendLowStockAlerts()
    {
        $criticalItems = $this->getCriticalStockItems();

        if ($criticalItems->isEmpty()) {
            return [
                'success' => true,
                'message' => 'No critical stock alerts to send',
                'items' => [],
            ];
        }

        // Log alerts
        foreach ($criticalItems as $item) {
            Log::warning('CRITICAL STOCK ALERT', [
                'item' => $item->name,
                'current_quantity' => $item->current_quantity,
                'minimum_threshold' => $item->minimum_threshold,
                'supplier' => $item->supplier ? $item->supplier->name : 'No supplier',
            ]);
        }

        // TODO: Send email notifications to admin/manager
        // TODO: Send SMS alerts if configured

        return [
            'success' => true,
            'message' => count($criticalItems) . ' critical stock alert(s) logged',
            'items' => $criticalItems->map(function ($item) {
                return [
                    'id' => $item->id,
                    'name' => $item->name,
                    'current_quantity' => $item->current_quantity,
                    'unit' => $item->unit_of_measure,
                    'status' => $item->stock_status_text,
                ];
            }),
        ];
    }
}
